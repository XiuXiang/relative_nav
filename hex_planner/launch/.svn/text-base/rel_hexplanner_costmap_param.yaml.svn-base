#global_frame: /motion_cap
#robot_base_frame: /camera_depth_frame
update_frequency: 10.0
publish_frequency: 2.0

#set if you want the voxel map published
publish_voxel_map: false
# Note: Use the package costmap_2d_markers or costmap_2d_cloud to convert to something rviz can display

#set to true if you want to initialize the costmap from a static map
static_map: false

#begin - COMMENT these lines if you set static_map to true
# FYI - a rolling window sets the robot in the center, so you have height/2 distance in front/back of you
# and width/2 distance to each side
rolling_window: true
width: 6.0
height: 6.0
resolution: 0.05
#end - COMMENT these lines if you set static_map to true

#START VOXEL STUFF
#map_type either costmap or voxel.  Voxel gives native 3D and projects to 2D, costmap is natively 2D. 
map_type: voxel 
origin_z: -0.5  #Make the origin 0.5 m below the node, so we capture what is below the node
z_resolution: 0.1
z_voxels: 10
unknown_threshold: 10
mark_threshold: 1

track_unknown_space: true
#END VOXEL STUFF

transform_tolerance: 1.0
obstacle_range: 3.0
max_obstacle_height: 0.85
raytrace_range: 3.25
#footprint: [[-0.325, -0.325], [-0.325, 0.325], [0.325, 0.325], [0.46, 0.0], [0.325, #-0.325]]
robot_radius: 0.503
footprint_padding: 0.02
inflation_radius: 0.53
cost_scaling_factor: 10.0
lethal_cost_threshold: 100
observation_sources: kinect_pts #kinect_scan
kinect_scan: {topic: /k_scan, data_type: LaserScan, expected_update_rate: 0.5, observation_persistence: 0.0, marking: true, clearing: true, max_obstacle_height: 0.5, min_obstacle_height: -0.1}
# Since this is relative, make it half a meter above and below the plane that the node is in. 

kinect_pts: {topic: /downsampled_cloud, data_type: PointCloud2, expected_update_rate: 0.5, observation_persistence: 0.0, marking: true, clearing: true, max_obstacle_height: 0.75 ,min_obstacle_height: -0.75, obstacle_range: 3.0}
