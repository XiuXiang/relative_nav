<launch>

  <!--  
      This launch file runs the openni nodelets (copied from openni_launch/launch/openni.launch)
      And it appends to it the nodelet pointcloud_to_laserscan to create a light scan out of a 
      dense cloud of 3D points.  Additionally, this file can publishe a downsampled 3D point cloud
      at a throttled rate.  Also, this calls device_mine.launch instead of the default device 
      launch, so that I can set a default value for the data_skip parameter.   

      This launch file is a conconction of openni.launch in the Pkg openni_launch and the 
      one I found online for the fake laser, embodied in trial.launch, and available at
      http://answers.ros.org/question/9442/2d-slam-with-gmapping-and-openni_kinect/.
       
      This version runs faster than the one in trial.launch as it only starts 1 openni node/nodelet.
      The other version starts two and it slows down the system. 
  -->

  <!-- My Additional Arguments: -->

  <!-- How many images should be skipped each time? 1 means every other frame e.g. 15Hz, 
       2 means every two frames e.g. 10Hz, etc.  (Data Skip) -->
  <arg name="data_skip_param"  default="1" /> 

  <!-- Whether or not to compute the psuedo laser scanning -->
  <arg name="scanner" default="true" />

  <!-- Use this parameter to specify whether or not point clouds are downsampled -->
  <arg name="downsample" default="true" />

 
  <!-- OpenNI Stuff: -->
  
  <!-- "camera" should uniquely identify the device. All topics are pushed down
       into the "camera" namespace, and it is prepended to tf frame ids. -->
  <arg name="camera" default="camera" />
  <arg name="rgb_frame_id"   default="/$(arg camera)_rgb_optical_frame" />
  <arg name="depth_frame_id" default="/$(arg camera)_depth_optical_frame" />

  <!-- device_id can have the following formats:
         "B00367707227042B": Use device with given serial number
         "#1"              : Use first device found
         "2@3"             : Use device on USB bus 2, address 3
	 "2@0"             : Use first device found on USB bus 2
    -->
  <arg name="device_id" default="#1" />

  <!-- By default, calibrations are stored to file://${ROS_HOME}/camera_info/${NAME}.yaml,
       where ${NAME} is of the form "[rgb|depth]_[serial#]", e.g. "depth_B00367707227042B".
       See camera_info_manager docs for calibration URL details. -->
  <arg name="rgb_camera_info_url"   default="" />
  <arg name="depth_camera_info_url" default="" />

  <!-- Use OpenNI's factory-calibrated depth->RGB registration? -->
  <arg name="depth_registration" default="true" />



  <!-- Arguments for remapping all device namespaces -->
  <arg name="rgb"              default="rgb" />
  <arg name="ir"               default="ir" />
  <arg name="depth"            default="depth" />
  <arg name="depth_registered" default="depth_registered" />
  <arg name="projector"        default="projector" />

  <!-- Optionally suppress loading the driver nodelet and/or publishing the default tf
       tree. Useful if you are playing back recorded raw data from a bag, or are
       supplying a more accurate tf tree from calibration. -->
  <arg name="load_driver" default="true" />
  <arg name="publish_tf" default="true" />

  <!-- Disable bond topics by default -->
  <arg name="bond" default="false" /> <!-- DEPRECATED, use respawn arg instead -->
  <arg name="respawn" default="$(arg bond)" />

  <!-- Start nodelet manager in top-level namespace -->
  <arg name="manager" value="$(arg camera)_nodelet_manager" />
  <arg name="debug" default="false" /> <!-- Run manager in GDB? -->
  <include file="$(find openni_launch)/launch/includes/manager.launch">
    <arg name="name" value="$(arg manager)" />
    <arg name="debug" value="$(arg debug)" />
  </include>

  <!-- Push down all topics/nodelets into "camera" namespace -->
  <group ns="$(arg camera)">

    <!-- Load driver (use my version, so that I can set a default skip_frames parameter)-->
    <include if="$(arg load_driver)"
       file="$(find hex_launch)/launch/includes/device_mine.launch">
	     <!-- file="$(find openni_launch)/launch/includes/device.launch"> -->
      <arg name="manager"               value="/$(arg manager)" /> <!-- Fully resolved -->
      <arg name="device_id"             value="$(arg device_id)" />
      <arg name="rgb_frame_id"          value="$(arg rgb_frame_id)" />
      <arg name="depth_frame_id"        value="$(arg depth_frame_id)" />
      <arg name="rgb_camera_info_url"   value="$(arg rgb_camera_info_url)" />
      <arg name="depth_camera_info_url" value="$(arg depth_camera_info_url)" />
      <arg name="depth_registration"    value="$(arg depth_registration)" />
      <arg name="rgb"                   value="$(arg rgb)" />
      <arg name="ir"                    value="$(arg ir)" />
      <arg name="depth"                 value="$(arg depth)" />
      <arg name="depth_registered"      value="$(arg depth_registered)" />
      <arg name="projector"             value="$(arg projector)" />
      <arg name="respawn"               value="$(arg respawn)" />
      <arg name="data_skip_param"       value="$(arg data_skip_param)" />
    </include>

    <!-- Load standard constellation of processing nodelets -->
    <include file="$(find openni_launch)/launch/includes/processing.launch" >
      <arg name="manager"               value="/$(arg manager)" /> <!-- Fully resolved -->
      <arg name="rgb"                   value="$(arg rgb)" />
      <arg name="ir"                    value="$(arg ir)" />
      <arg name="depth"                 value="$(arg depth)" />
      <arg name="depth_registered"      value="$(arg depth_registered)" />
      <arg name="projector"             value="$(arg projector)" />
      <arg name="respawn"               value="$(arg respawn)" />
    </include>

  </group> 



  <!-- pointcloud_to_laserscan for converting the RGBD to a "laser scanner" using the nodelet -->

  <!-- throttling nodelet -->
  <node pkg="nodelet" type="nodelet" name="pointcloud_throttle" args="load pointcloud_to_laserscan/CloudThrottle $(arg manager)"  >  
    <param name="max_rate" value="5"/> <!-- Set the value to the max rate in Hz for throttling-->
    <remap from="cloud_in" to="/$(arg camera)/$(arg depth_registered)/points"/>
    <remap from="cloud_out" to="cloud_throttled"/>
  </node> 

  <!-- fake laser (change arg scanner to include or not) This one doesn't use the throttled pointcloud-->
  <node if="$(arg scanner)" pkg="nodelet" type="nodelet" name="kinect_laser" args="load pointcloud_to_laserscan/CloudToScan $(arg manager)">
    <param name="output_frame_id" value="/$(arg camera)_depth_frame"/>
    <param name="angle_min" value="-3.14/2" />
    <param name="angle_max" value="3.14/2" /> 
    <param name="min_height" value="-0.1"/>  <!-- min height in the scan to include -->
    <param name="max_height" value="0.25"/>  <!-- max height in the scan to include -->
    <param name="range_max" value="5.0"/> <!-- max range to return -->
    <remap from="cloud" to="/$(arg camera)/$(arg depth_registered)/points"/>
    <remap from="scan" to="k_scan"/> 
  </node>


  <!-- Add nodelet to downsample the point cloud, if desired -->
  <node if="$(arg downsample)" pkg="nodelet" type="nodelet" name="downsampler" args="load downsample_pointcloud/CloudThrottleNodelet $(arg manager)">
    <param name="input_cloud_name" value="cloud_throttled" />
    <param name="output_cloud_name" value="/downsampled_cloud" />
    <param name="x_leaf_size" value="0.10" />
    <param name="y_leaf_size" value="0.10" />
    <param name="z_leaf_size" value="0.10" />
  </node>



  <!-- tf stuff for Openni -->
  
  <!-- Load reasonable defaults for the relative pose between cameras -->
  <!-- The original: <include if="$(arg publish_tf)"
	   file="$(find openni_launch)/launch/kinect_frames.launch">
    <arg name="camera" value="$(arg camera)" /> -->

  <include if="$(arg publish_tf)"
	   file="$(find hex_launch)/launch/includes/kinect_frames_mine.launch">
    <arg name="camera" value="$(arg camera)" /> 
  </include>

</launch>
